@page "/sku/{id}"
@using Microsoft.AspNetCore.WebUtilities
@using Arbetsprov.Application.DTO
@using System.Linq
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>@Id</h1>

<BSBasicForm>
    <BSFormGroup>
        <label>Market</label>
        <select class="px-2 py-1 rounded-lg ml-1 bg-dark text-white" value="@SelectedMarket" @onchange="OnChangeMarketSelect">
            @foreach (var market in Markets)
            {
                <option value="@market">@market</option>
            }
        </select>
        <label class="ml-3">Currency</label>
        <select class="px-2 py-1 rounded-lg ml-1 bg-dark text-white" value="@SelectedCurrency" @onchange="OnChangeCurrencySelect">
            @foreach (var currency in Currencies)
            {
                <option value="@currency">@currency</option>
            }
        </select>
    </BSFormGroup>
</BSBasicForm>

@if (PricePeriods == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BSTable Class="rounded" IsDark="true" IsBordered="true" IsStriped="true">
        <thead>
            <tr>
                <th>Marknad</th>
                <th>Pris</th>
                <th>Valuta</th>
                <th>Start och slut</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var period in PricePeriods)
            {
                <tr>
                    <td>@period.Market</td>
                    <td>@period.Price</td>
                    <td>@period.Currency</td>
                    <td>@period.Start - @period.End</td>
                </tr>
            }
        </tbody>
    </BSTable>
}

@code {

        [Parameter]
        public string Id { get; set; }

    private readonly string MarketQuery = "market";
    private readonly string CurrencyQuery = "currency";

    private OptimizedPricePeriod[] PricePeriods;

    private List<string> Markets = new List<string>();
    private List<string> Currencies = new List<string>();

    private string SelectedMarket { get; set; } = "";
    private string SelectedCurrency { get; set; } = "";

    protected async void OnChangeMarketSelect(ChangeEventArgs e)
    {
        SelectedMarket = (string)e.Value;
        await OnChangeSelect();
    }

    protected async void OnChangeCurrencySelect(ChangeEventArgs e)
    {
        SelectedCurrency = (string)e.Value;
        await OnChangeSelect();
    }

    protected async Task OnChangeSelect()
    {
        var query = new Dictionary<string, string> { { MarketQuery, SelectedMarket }, { CurrencyQuery, SelectedCurrency } };

        // Modify URL on market or currency change
        NavigationManager.NavigateTo(QueryHelpers.AddQueryString(NavigationManager.BaseUri + "sku/" + Id, query));

        await FetchPricePeriods();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var exists = (await Http.GetAsync($"api/PriceDetail/{Id}/exists"));

        // If requsted SKU doesn't exist, navigate to home page.
        if (exists.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri);
            return;
        }

        Markets = (await Http.GetFromJsonAsync<string[]>($"api/PriceDetail/{Id}/markets")).ToList();
        Currencies = (await Http.GetFromJsonAsync<string[]>($"api/PriceDetail/{Id}/currencies")).ToList();

        var query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue(MarketQuery, out var value))
            SelectedMarket = value;
        if (QueryHelpers.ParseQuery(query).TryGetValue(CurrencyQuery, out value))
            SelectedCurrency = value;

        await FetchPricePeriods();
    }

    protected async Task FetchPricePeriods()
    {
        PricePeriods = await Http.GetFromJsonAsync<OptimizedPricePeriod[]>($"api/PriceDetail/{Id}/optimizedvalues?market={SelectedMarket}&currency={SelectedCurrency}");
    }

}
